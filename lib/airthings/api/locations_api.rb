# frozen_string_literal: true

# #Airthings API
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.2.0
#

require "cgi"

module Airthings
  class LocationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get info about a specific Location
    # @param location_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :show_inactive  (default to false)
    # @option opts [String] :organization_id
    # @option opts [String] :user_group_id
    # @return [GetLocationResponse]
    def location_info(location_id, opts = {})
      data, _status_code, _headers = location_info_with_http_info(location_id, opts)
      data
    end

    # Get info about a specific Location
    # @param location_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :show_inactive  (default to false)
    # @option opts [String] :organization_id
    # @option opts [String] :user_group_id
    # @return [Array<(GetLocationResponse, Integer, Hash)>] GetLocationResponse data, response status code and response headers
    def location_info_with_http_info(location_id, opts = {})
      @api_client.config.logger.debug "Calling API: LocationsApi.location_info ..." if @api_client.config.debugging
      # verify the required parameter 'location_id' is set
      if @api_client.config.client_side_validation && location_id.nil?
        raise ArgumentError, "Missing the required parameter 'location_id' when calling LocationsApi.location_info"
      end

      # resource path
      local_var_path = "/locations/{locationId}".sub("{locationId}", CGI.escape(location_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:showInactive] = opts[:show_inactive] unless opts[:show_inactive].nil?
      query_params[:organizationId] = opts[:organization_id] unless opts[:organization_id].nil?
      query_params[:userGroupId] = opts[:user_group_id] unless opts[:user_group_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetLocationResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["AirthingsAccounts"]

      new_options = opts.merge(
        operation: :"LocationsApi.location_info",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocationsApi#location_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get all added Locations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id
    # @option opts [String] :user_group_id
    # @return [GetLocationsResponse]
    def locations_list(opts = {})
      data, _status_code, _headers = locations_list_with_http_info(opts)
      data
    end

    # Get all added Locations
    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id
    # @option opts [String] :user_group_id
    # @return [Array<(GetLocationsResponse, Integer, Hash)>] GetLocationsResponse data, response status code and response headers
    def locations_list_with_http_info(opts = {})
      @api_client.config.logger.debug "Calling API: LocationsApi.locations_list ..." if @api_client.config.debugging
      # resource path
      local_var_path = "/locations"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:organizationId] = opts[:organization_id] unless opts[:organization_id].nil?
      query_params[:userGroupId] = opts[:user_group_id] unless opts[:user_group_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetLocationsResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["AirthingsAccounts"]

      new_options = opts.merge(
        operation: :"LocationsApi.locations_list",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocationsApi#locations_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end

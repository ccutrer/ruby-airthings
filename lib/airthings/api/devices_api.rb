# frozen_string_literal: true

# #Airthings API
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.2.0
#

require "cgi"

module Airthings
  class DevicesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get info about a specific Device
    # @param serial_number [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id
    # @option opts [String] :user_group_id
    # @return [GetDeviceDetailedResponse]
    def device_info(serial_number, opts = {})
      data, _status_code, _headers = device_info_with_http_info(serial_number, opts)
      data
    end

    # Get info about a specific Device
    # @param serial_number [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id
    # @option opts [String] :user_group_id
    # @return [Array<(GetDeviceDetailedResponse, Integer, Hash)>] GetDeviceDetailedResponse data, response status code and response headers
    def device_info_with_http_info(serial_number, opts = {})
      @api_client.config.logger.debug "Calling API: DevicesApi.device_info ..." if @api_client.config.debugging
      # verify the required parameter 'serial_number' is set
      if @api_client.config.client_side_validation && serial_number.nil?
        raise ArgumentError, "Missing the required parameter 'serial_number' when calling DevicesApi.device_info"
      end

      # resource path
      local_var_path = "/devices/{serialNumber}".sub("{serialNumber}", CGI.escape(serial_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:organizationId] = opts[:organization_id] unless opts[:organization_id].nil?
      query_params[:userGroupId] = opts[:user_group_id] unless opts[:user_group_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetDeviceDetailedResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["AirthingsAccounts"]

      new_options = opts.merge(
        operation: :"DevicesApi.device_info",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevicesApi#device_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get latest Samples belonging to a specific Device (latest segment)
    # @param serial_number [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id
    # @option opts [String] :user_group_id
    # @return [SingleSampleResponse]
    def device_samples_latest_values(serial_number, opts = {})
      data, _status_code, _headers = device_samples_latest_values_with_http_info(serial_number, opts)
      data
    end

    # Get latest Samples belonging to a specific Device (latest segment)
    # @param serial_number [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :organization_id
    # @option opts [String] :user_group_id
    # @return [Array<(SingleSampleResponse, Integer, Hash)>] SingleSampleResponse data, response status code and response headers
    def device_samples_latest_values_with_http_info(serial_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DevicesApi.device_samples_latest_values ..."
      end
      # verify the required parameter 'serial_number' is set
      if @api_client.config.client_side_validation && serial_number.nil?
        raise ArgumentError, "Missing the required parameter 'serial_number' when calling DevicesApi.device_samples_latest_values"
      end

      # resource path
      local_var_path = "/devices/{serialNumber}/latest-samples".sub("{serialNumber}", CGI.escape(serial_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:organizationId] = opts[:organization_id] unless opts[:organization_id].nil?
      query_params[:userGroupId] = opts[:user_group_id] unless opts[:user_group_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "SingleSampleResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["AirthingsAccounts"]

      new_options = opts.merge(
        operation: :"DevicesApi.device_samples_latest_values",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevicesApi#device_samples_latest_values\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Devices belonging to the Account
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :show_inactive  (default to false)
    # @option opts [String] :organization_id
    # @option opts [String] :user_group_id
    # @return [GetDevicesResponse]
    def devices_list(opts = {})
      data, _status_code, _headers = devices_list_with_http_info(opts)
      data
    end

    # Get Devices belonging to the Account
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :show_inactive  (default to false)
    # @option opts [String] :organization_id
    # @option opts [String] :user_group_id
    # @return [Array<(GetDevicesResponse, Integer, Hash)>] GetDevicesResponse data, response status code and response headers
    def devices_list_with_http_info(opts = {})
      @api_client.config.logger.debug "Calling API: DevicesApi.devices_list ..." if @api_client.config.debugging
      # resource path
      local_var_path = "/devices"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:showInactive] = opts[:show_inactive] unless opts[:show_inactive].nil?
      query_params[:organizationId] = opts[:organization_id] unless opts[:organization_id].nil?
      query_params[:userGroupId] = opts[:user_group_id] unless opts[:user_group_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "GetDevicesResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["AirthingsAccounts"]

      new_options = opts.merge(
        operation: :"DevicesApi.devices_list",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DevicesApi#devices_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end

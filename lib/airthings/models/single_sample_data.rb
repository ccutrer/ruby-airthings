# frozen_string_literal: true

# #Airthings API
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.2.0
#

require "date"
require "time"

module Airthings
  class SingleSampleData
    attr_accessor :battery, :co2, :humidity, :light, :lux, :mold, :pm1, :pm10, :pm25, :pressure, :pressure_difference, :radon_short_term_avg, :rssi, :sla, :temp, :time, :virus_risk, :voc, :outdoor_temp, :outdoor_humidity, :outdoor_pressure, :outdoor_pm10, :outdoor_pm1, :outdoor_pm25, :outdoor_no2, :outdoor_o3, :outdoor_so2, :outdoor_co, :outdoor_no, :control_signal, :control_signal_slot01, :control_signal_slot02, :control_signal_slot03, :control_signal_slot04, :control_signal_slot05, :control_signal_slot06, :control_signal_slot07, :control_signal_slot08, :regulation_pressure, :regulation_height, :relay_device_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        battery: :battery,
        co2: :co2,
        humidity: :humidity,
        light: :light,
        lux: :lux,
        mold: :mold,
        pm1: :pm1,
        pm10: :pm10,
        pm25: :pm25,
        pressure: :pressure,
        pressure_difference: :pressureDifference,
        radon_short_term_avg: :radonShortTermAvg,
        rssi: :rssi,
        sla: :sla,
        temp: :temp,
        time: :time,
        virus_risk: :virusRisk,
        voc: :voc,
        outdoor_temp: :outdoorTemp,
        outdoor_humidity: :outdoorHumidity,
        outdoor_pressure: :outdoorPressure,
        outdoor_pm10: :outdoorPm10,
        outdoor_pm1: :outdoorPm1,
        outdoor_pm25: :outdoorPm25,
        outdoor_no2: :outdoorNo2,
        outdoor_o3: :outdoorO3,
        outdoor_so2: :outdoorSo2,
        outdoor_co: :outdoorCo,
        outdoor_no: :outdoorNo,
        control_signal: :controlSignal,
        control_signal_slot01: :controlSignalSlot01,
        control_signal_slot02: :controlSignalSlot02,
        control_signal_slot03: :controlSignalSlot03,
        control_signal_slot04: :controlSignalSlot04,
        control_signal_slot05: :controlSignalSlot05,
        control_signal_slot06: :controlSignalSlot06,
        control_signal_slot07: :controlSignalSlot07,
        control_signal_slot08: :controlSignalSlot08,
        regulation_pressure: :regulationPressure,
        regulation_height: :regulationHeight,
        relay_device_type: :relayDeviceType
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        battery: :Integer,
        co2: :Float,
        humidity: :Float,
        light: :Integer,
        lux: :Integer,
        mold: :Float,
        pm1: :Float,
        pm10: :Float,
        pm25: :Float,
        pressure: :Float,
        pressure_difference: :Float,
        radon_short_term_avg: :Float,
        rssi: :Integer,
        sla: :Float,
        temp: :Float,
        time: :Integer,
        virus_risk: :Float,
        voc: :Float,
        outdoor_temp: :Float,
        outdoor_humidity: :Float,
        outdoor_pressure: :Float,
        outdoor_pm10: :Float,
        outdoor_pm1: :Float,
        outdoor_pm25: :Float,
        outdoor_no2: :Float,
        outdoor_o3: :Float,
        outdoor_so2: :Float,
        outdoor_co: :Float,
        outdoor_no: :Float,
        control_signal: :Float,
        control_signal_slot01: :Float,
        control_signal_slot02: :Float,
        control_signal_slot03: :Float,
        control_signal_slot04: :Float,
        control_signal_slot05: :Float,
        control_signal_slot06: :Float,
        control_signal_slot07: :Float,
        control_signal_slot08: :Float,
        regulation_pressure: :Float,
        regulation_height: :Float,
        relay_device_type: :String
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError, "The input argument (attributes) must be a hash in `Airthings::SingleSampleData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError, "`#{k}` is not a valid attribute in `Airthings::SingleSampleData`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.battery = attributes[:battery] if attributes.key?(:battery)

      self.co2 = attributes[:co2] if attributes.key?(:co2)

      self.humidity = attributes[:humidity] if attributes.key?(:humidity)

      self.light = attributes[:light] if attributes.key?(:light)

      self.lux = attributes[:lux] if attributes.key?(:lux)

      self.mold = attributes[:mold] if attributes.key?(:mold)

      self.pm1 = attributes[:pm1] if attributes.key?(:pm1)

      self.pm10 = attributes[:pm10] if attributes.key?(:pm10)

      self.pm25 = attributes[:pm25] if attributes.key?(:pm25)

      self.pressure = attributes[:pressure] if attributes.key?(:pressure)

      self.pressure_difference = attributes[:pressure_difference] if attributes.key?(:pressure_difference)

      self.radon_short_term_avg = attributes[:radon_short_term_avg] if attributes.key?(:radon_short_term_avg)

      self.rssi = attributes[:rssi] if attributes.key?(:rssi)

      self.sla = attributes[:sla] if attributes.key?(:sla)

      self.temp = attributes[:temp] if attributes.key?(:temp)

      self.time = attributes[:time] if attributes.key?(:time)

      self.virus_risk = attributes[:virus_risk] if attributes.key?(:virus_risk)

      self.voc = attributes[:voc] if attributes.key?(:voc)

      self.outdoor_temp = attributes[:outdoor_temp] if attributes.key?(:outdoor_temp)

      self.outdoor_humidity = attributes[:outdoor_humidity] if attributes.key?(:outdoor_humidity)

      self.outdoor_pressure = attributes[:outdoor_pressure] if attributes.key?(:outdoor_pressure)

      self.outdoor_pm10 = attributes[:outdoor_pm10] if attributes.key?(:outdoor_pm10)

      self.outdoor_pm1 = attributes[:outdoor_pm1] if attributes.key?(:outdoor_pm1)

      self.outdoor_pm25 = attributes[:outdoor_pm25] if attributes.key?(:outdoor_pm25)

      self.outdoor_no2 = attributes[:outdoor_no2] if attributes.key?(:outdoor_no2)

      self.outdoor_o3 = attributes[:outdoor_o3] if attributes.key?(:outdoor_o3)

      self.outdoor_so2 = attributes[:outdoor_so2] if attributes.key?(:outdoor_so2)

      self.outdoor_co = attributes[:outdoor_co] if attributes.key?(:outdoor_co)

      self.outdoor_no = attributes[:outdoor_no] if attributes.key?(:outdoor_no)

      self.control_signal = attributes[:control_signal] if attributes.key?(:control_signal)

      self.control_signal_slot01 = attributes[:control_signal_slot01] if attributes.key?(:control_signal_slot01)

      self.control_signal_slot02 = attributes[:control_signal_slot02] if attributes.key?(:control_signal_slot02)

      self.control_signal_slot03 = attributes[:control_signal_slot03] if attributes.key?(:control_signal_slot03)

      self.control_signal_slot04 = attributes[:control_signal_slot04] if attributes.key?(:control_signal_slot04)

      self.control_signal_slot05 = attributes[:control_signal_slot05] if attributes.key?(:control_signal_slot05)

      self.control_signal_slot06 = attributes[:control_signal_slot06] if attributes.key?(:control_signal_slot06)

      self.control_signal_slot07 = attributes[:control_signal_slot07] if attributes.key?(:control_signal_slot07)

      self.control_signal_slot08 = attributes[:control_signal_slot08] if attributes.key?(:control_signal_slot08)

      self.regulation_pressure = attributes[:regulation_pressure] if attributes.key?(:regulation_pressure)

      self.regulation_height = attributes[:regulation_height] if attributes.key?(:regulation_height)

      self.relay_device_type = attributes[:relay_device_type] if attributes.key?(:relay_device_type)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        battery == other.battery &&
        co2 == other.co2 &&
        humidity == other.humidity &&
        light == other.light &&
        lux == other.lux &&
        mold == other.mold &&
        pm1 == other.pm1 &&
        pm10 == other.pm10 &&
        pm25 == other.pm25 &&
        pressure == other.pressure &&
        pressure_difference == other.pressure_difference &&
        radon_short_term_avg == other.radon_short_term_avg &&
        rssi == other.rssi &&
        sla == other.sla &&
        temp == other.temp &&
        time == other.time &&
        virus_risk == other.virus_risk &&
        voc == other.voc &&
        outdoor_temp == other.outdoor_temp &&
        outdoor_humidity == other.outdoor_humidity &&
        outdoor_pressure == other.outdoor_pressure &&
        outdoor_pm10 == other.outdoor_pm10 &&
        outdoor_pm1 == other.outdoor_pm1 &&
        outdoor_pm25 == other.outdoor_pm25 &&
        outdoor_no2 == other.outdoor_no2 &&
        outdoor_o3 == other.outdoor_o3 &&
        outdoor_so2 == other.outdoor_so2 &&
        outdoor_co == other.outdoor_co &&
        outdoor_no == other.outdoor_no &&
        control_signal == other.control_signal &&
        control_signal_slot01 == other.control_signal_slot01 &&
        control_signal_slot02 == other.control_signal_slot02 &&
        control_signal_slot03 == other.control_signal_slot03 &&
        control_signal_slot04 == other.control_signal_slot04 &&
        control_signal_slot05 == other.control_signal_slot05 &&
        control_signal_slot06 == other.control_signal_slot06 &&
        control_signal_slot07 == other.control_signal_slot07 &&
        control_signal_slot08 == other.control_signal_slot08 &&
        regulation_pressure == other.regulation_pressure &&
        regulation_height == other.regulation_height &&
        relay_device_type == other.relay_device_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [battery, co2, humidity, light, lux, mold, pm1, pm10, pm25, pressure, pressure_difference, radon_short_term_avg, rssi, sla, temp, time, virus_risk, voc, outdoor_temp, outdoor_humidity, outdoor_pressure, outdoor_pm10, outdoor_pm1, outdoor_pm25, outdoor_no2, outdoor_o3, outdoor_so2, outdoor_co, outdoor_no, control_signal, control_signal_slot01, control_signal_slot02, control_signal_slot03, control_signal_slot04, control_signal_slot05, control_signal_slot06, control_signal_slot07, control_signal_slot08, regulation_pressure, regulation_height, relay_device_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Airthings.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end

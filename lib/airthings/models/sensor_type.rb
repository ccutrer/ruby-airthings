# frozen_string_literal: true

# #Airthings API
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: v1
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.2.0
#

require "date"
require "time"

module Airthings
  class SensorType
    RADON_SHORT_TERM_AVG = "radonShortTermAvg"
    RADON_LONG_TERM_AVG = "radonLongTermAvg"
    TEMP = "temp"
    OUTDOOR_TEMP = "outdoorTemp"
    HUMIDITY = "humidity"
    OUTDOOR_HUMIDITY = "outdoorHumidity"
    CO2 = "co2"
    VOC = "voc"
    PRESSURE = "pressure"
    OUTDOOR_PRESSURE = "outdoorPressure"
    PRESSURE_DIFFERENCE = "pressureDifference"
    PRESSURE_DIFF_STD_DEV = "pressureDiffStdDev"
    PRESSURE_DIFF_MIN = "pressureDiffMin"
    PRESSURE_DIFF_MAX = "pressureDiffMax"
    LIGHT = "light"
    LUX = "lux"
    BATTERY_PERCENTAGE = "batteryPercentage"
    BATTERY_VOLTAGE = "batteryVoltage"
    ORIENTATION = "orientation"
    PM1 = "pm1"
    OUTDOOR_PM1 = "outdoorPm1"
    PM25 = "pm25"
    OUTDOOR_PM25 = "outdoorPm25"
    PM10 = "pm10"
    OUTDOOR_PM10 = "outdoorPm10"
    MOLD = "mold"
    STALE_AIR = "staleAir"
    TRANSMISSION_EFFICIENCY = "transmissionEfficiency"
    VIRUS_SURVIVAL_RATE = "virusSurvivalRate"
    VIRUS_RISK = "virusRisk"
    WIND_SPEED = "windSpeed"
    WIND_DIRECTION = "windDirection"
    WIND_GUST = "windGust"
    DEW_POINT = "dewPoint"
    CLOUD_COVER = "cloudCover"
    VISIBILITY = "visibility"
    PRECIPITATION_PROBABILITY = "precipitation_probability"
    TOTAL_PRECIPITATION = "total_precipitation"
    OUTDOOR_WEATHER = "outdoorWeather"
    HOURLY_RADON_STANDARD_DEVIATION = "hourlyRadonStandardDeviation"
    HOURLY_RADON = "hourlyRadon"
    ENERGY_WASTAGE = "energyWastage"
    ENERGY_SCENARIOS = "energyScenarios"
    HISTORIC_VENTILATION_CONFIDENCE = "historicVentilationConfidence"
    DAYTIME_BASELINE = "daytimeBaseline"
    DAYTIME_PEAK = "daytimePeak"
    NIGHT_BASELINE = "nightBaseline"
    HISTORIC_VENTILATION = "historicVentilation"
    VENTILATION_RUNNING_CONFIDENCE = "ventilationRunningConfidence"
    OCCUPANTS_UPPER = "occupantsUpper"
    OCCUPANTS_LOWER = "occupantsLower"
    OCCUPANTS = "occupants"
    RELATIVE_OCCUPANTS = "relativeOccupants"
    VENTILATION_AMOUNT = "ventilationAmount"
    HISTORIC_VENTILATION_RUNNING = "historicVentilationRunning"
    VENTILATION_RUNNING = "ventilationRunning"
    RELATIVE_VENTILATION_RATE = "relativeVentilationRate"
    AGGREGATED = "aggregated"
    SLA = "sla"
    PRESSURE_AT_MIN_HEIGHT = "pressureAtMinHeight"
    PRESSURE_AT_MAX_HEIGHT = "pressureAtMaxHeight"
    REGULATION_PRESSURE = "regulationPressure"
    REGULATION_HEIGHT = "regulationHeight"
    ZERO_PRESSURE_HEIGHT = "zeroPressureHeight"
    TOTAL_POWER_LOST = "totalPowerLost"
    MOIST_GUARD = "moistGuard"
    POTENTIAL_POWER_SAVED = "potentialPowerSaved"
    POTENTIAL_POWER_SAVED_PERCENT = "potentialPowerSavedPercent"
    ZERO_HEIGHT_PERCENT = "zeroHeightPercent"
    ZONE = "zone"
    CONTROL_SIGNAL = "controlSignal"
    CONTROL_STATUS = "controlStatus"
    RETURN_STATE = "returnState"
    APPLIED_GAIN = "appliedGain"
    LAST_BEST_CONTROL_SIGNAL = "lastBestControlSignal"
    LAST_BEST_SIGNAL_ERROR = "lastBestSignalError"
    LAST_BEST_CONTROL_SIGNAL_GAIN = "lastBestControlSignalGain"
    LAST_BEST_CONTROL_SIGNAL_RECORDED = "lastBestControlSignalRecorded"
    MESSAGES = "messages"
    BALANCE_CONTROL = "balanceControl"
    CONTROL_SIGNAL_SLOT01 = "controlSignalSlot01"
    CONTROL_SIGNAL_SLOT02 = "controlSignalSlot02"
    CONTROL_SIGNAL_SLOT03 = "controlSignalSlot03"
    CONTROL_SIGNAL_SLOT04 = "controlSignalSlot04"
    CONTROL_SIGNAL_SLOT05 = "controlSignalSlot05"
    CONTROL_SIGNAL_SLOT06 = "controlSignalSlot06"
    CONTROL_SIGNAL_SLOT07 = "controlSignalSlot07"
    CONTROL_SIGNAL_SLOT08 = "controlSignalSlot08"
    INLET_AIR_CONTROL = "inletAirControl"
    POWER_VOLTAGE = "powerVoltage"
    RSRP = "rsrp"
    VENT_CONTROLLER = "ventController"
    SUBSAMPLES_COUNT = "subsamplesCount"
    SUBSAMPLES = "subsamples"
    BALANCE_INFO = "balanceInfo"
    OUTDOOR_NO2 = "outdoorNo2"
    OUTDOOR_O3 = "outdoorO3"
    OUTDOOR_SO2 = "outdoorSo2"
    OUTDOOR_CO = "outdoorCo"
    OUTDOOR_NO = "outdoorNo"
    AIRLY = "airly"
    AIRLY_NO2 = "airlyNo2"
    AIRLY_CO = "airlyCo"
    AIRLY_NO = "airlyNo"
    BACNET = "bacnet"

    def self.all_vars
      @all_vars ||= [RADON_SHORT_TERM_AVG, RADON_LONG_TERM_AVG, TEMP, OUTDOOR_TEMP, HUMIDITY, OUTDOOR_HUMIDITY, CO2, VOC, PRESSURE, OUTDOOR_PRESSURE, PRESSURE_DIFFERENCE, PRESSURE_DIFF_STD_DEV, PRESSURE_DIFF_MIN, PRESSURE_DIFF_MAX, LIGHT, LUX, BATTERY_PERCENTAGE, BATTERY_VOLTAGE, ORIENTATION, PM1, OUTDOOR_PM1, PM25, OUTDOOR_PM25, PM10, OUTDOOR_PM10, MOLD, STALE_AIR, TRANSMISSION_EFFICIENCY, VIRUS_SURVIVAL_RATE, VIRUS_RISK, WIND_SPEED, WIND_DIRECTION, WIND_GUST, DEW_POINT, CLOUD_COVER, VISIBILITY, PRECIPITATION_PROBABILITY, TOTAL_PRECIPITATION, OUTDOOR_WEATHER, HOURLY_RADON_STANDARD_DEVIATION, HOURLY_RADON, ENERGY_WASTAGE, ENERGY_SCENARIOS, HISTORIC_VENTILATION_CONFIDENCE, DAYTIME_BASELINE, DAYTIME_PEAK, NIGHT_BASELINE, HISTORIC_VENTILATION, VENTILATION_RUNNING_CONFIDENCE, OCCUPANTS_UPPER, OCCUPANTS_LOWER, OCCUPANTS, RELATIVE_OCCUPANTS, VENTILATION_AMOUNT, HISTORIC_VENTILATION_RUNNING, VENTILATION_RUNNING, RELATIVE_VENTILATION_RATE, AGGREGATED, SLA, PRESSURE_AT_MIN_HEIGHT, PRESSURE_AT_MAX_HEIGHT, REGULATION_PRESSURE, REGULATION_HEIGHT, ZERO_PRESSURE_HEIGHT, TOTAL_POWER_LOST, MOIST_GUARD, POTENTIAL_POWER_SAVED, POTENTIAL_POWER_SAVED_PERCENT, ZERO_HEIGHT_PERCENT, ZONE, CONTROL_SIGNAL, CONTROL_STATUS, RETURN_STATE, APPLIED_GAIN, LAST_BEST_CONTROL_SIGNAL, LAST_BEST_SIGNAL_ERROR, LAST_BEST_CONTROL_SIGNAL_GAIN, LAST_BEST_CONTROL_SIGNAL_RECORDED, MESSAGES, BALANCE_CONTROL, CONTROL_SIGNAL_SLOT01, CONTROL_SIGNAL_SLOT02, CONTROL_SIGNAL_SLOT03, CONTROL_SIGNAL_SLOT04, CONTROL_SIGNAL_SLOT05, CONTROL_SIGNAL_SLOT06, CONTROL_SIGNAL_SLOT07, CONTROL_SIGNAL_SLOT08, INLET_AIR_CONTROL, POWER_VOLTAGE, RSRP, VENT_CONTROLLER, SUBSAMPLES_COUNT, SUBSAMPLES, BALANCE_INFO, OUTDOOR_NO2, OUTDOOR_O3, OUTDOOR_SO2, OUTDOOR_CO, OUTDOOR_NO, AIRLY, AIRLY_NO2, AIRLY_CO, AIRLY_NO, BACNET].freeze
    end

    # Builds the enum from string
    # @param [String] The enum value in the form of the string
    # @return [String] The enum value
    def self.build_from_hash(value)
      new.build_from_hash(value)
    end

    # Builds the enum from string
    # @param [String] The enum value in the form of the string
    # @return [String] The enum value
    def build_from_hash(value)
      return value if SensorType.all_vars.include?(value)

      raise "Invalid ENUM value #{value} for class #SensorType"
    end
  end
end
